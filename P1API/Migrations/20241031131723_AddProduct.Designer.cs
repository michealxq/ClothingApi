// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using P1API.Data;

#nullable disable

namespace P1API.Migrations
{
    [DbContext(typeof(ClothingDbContext))]
    [Migration("20241031131723_AddProduct")]
    partial class AddProduct
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("P1API.Models.Domains.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Men",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Women",
                            ParentCategoryId = 2
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Jacket",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Shorts",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Shirts",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryName = "Hoodies",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CategoryId = 7,
                            CategoryName = "T-Shirt",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CategoryId = 8,
                            CategoryName = "Jacket",
                            ParentCategoryId = 2
                        },
                        new
                        {
                            CategoryId = 9,
                            CategoryName = "Shorts",
                            ParentCategoryId = 2
                        },
                        new
                        {
                            CategoryId = 10,
                            CategoryName = "Shirts",
                            ParentCategoryId = 2
                        },
                        new
                        {
                            CategoryId = 11,
                            CategoryName = "Hoodies",
                            ParentCategoryId = 2
                        },
                        new
                        {
                            CategoryId = 12,
                            CategoryName = "T-Shirt",
                            ParentCategoryId = 2
                        });
                });

            modelBuilder.Entity("P1API.Models.Domains.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("P1API.Models.Domains.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("P1API.Models.Domains.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 8,
                            Description = "Upgrade your wardrobe with our timeless denim jacket. Crafted for durability and style, it's the perfect versatile piece for any occasion.",
                            Price = 35.49m,
                            ProductName = "Blue breeze jeans jacket",
                            StockQuantity = 10
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 8,
                            Description = "Elevate your style with our premium leather jacket. Crafted from high-quality leather, it offers sleek sophistication and lasting comfort for any occasion.",
                            Price = 80.49m,
                            ProductName = "Rebel roadster leather jacket",
                            StockQuantity = 10
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 4,
                            Description = "At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis.",
                            Price = 40.00m,
                            ProductName = "City comfort shorts",
                            StockQuantity = 10
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 5,
                            Description = "Introducing our stylish shirt, meticulously crafted for comfort and versatility, a must-have for every wardrobe.",
                            Price = 105.49m,
                            ProductName = "Wanderer wave men shirt",
                            StockQuantity = 10
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2,
                            Description = "Introducing our elegant dress, designed for timeless style and effortless sophistication.",
                            Price = 47.00m,
                            ProductName = "Bluebird belle dress",
                            StockQuantity = 10
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 8,
                            Description = "Upgrade your wardrobe with our timeless denim jacket. Crafted for durability and style, it's the perfect versatile piece for any occasion.",
                            Price = 95.00m,
                            ProductName = "Denim delight jacket",
                            StockQuantity = 10
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 8,
                            Description = "Introducing our sleek jacket, crafted for timeless style and enduring comfort.",
                            Price = 105.00m,
                            ProductName = "Silver shadow jacket",
                            StockQuantity = 10
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 2,
                            Description = "Introducing our sleek sweater, crafted for timeless style and enduring comfort.",
                            Price = 120.49m,
                            ProductName = "Smoke symphony sweater",
                            StockQuantity = 10
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 8,
                            Description = "Elevate your style with our premium leather jacket. Crafted from high-quality leather, it offers sleek sophistication and lasting comfort for any occasion.",
                            Price = 49.00m,
                            ProductName = "Caramel charm jacket",
                            StockQuantity = 10
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 3,
                            Description = "Introducing our sleek jacket, crafted for timeless style and enduring comfort.",
                            Price = 120.49m,
                            ProductName = "Dark knight defender jacket",
                            StockQuantity = 10
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 9,
                            Description = "At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos.",
                            Price = 79.49m,
                            ProductName = "Denim dreamer shorts",
                            StockQuantity = 10
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 12,
                            Description = "Introducing our stylish t-shirt, meticulously crafted for comfort and versatility, a must-have for every wardrobe.",
                            Price = 33.00m,
                            ProductName = "Blackbird bloom t-shirt",
                            StockQuantity = 10
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 7,
                            Description = "Introducing our stylish t-shirt, meticulously crafted for comfort and versatility, a must-have for every wardrobe.",
                            Price = 42.00m,
                            ProductName = "Midnight majesty t-shirt",
                            StockQuantity = 10
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 3,
                            Description = "Introducing our sleek jacket, crafted for timeless style and enduring comfort.",
                            Price = 35.49m,
                            ProductName = "Blackout bomber jacket",
                            StockQuantity = 10
                        });
                });

            modelBuilder.Entity("P1API.Models.Domains.ProductImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductImageId"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("P1API.Models.Domains.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("P1API.Models.Domains.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("P1API.Models.Domains.Order", b =>
                {
                    b.HasOne("P1API.Models.Domains.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("P1API.Models.Domains.OrderItem", b =>
                {
                    b.HasOne("P1API.Models.Domains.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("P1API.Models.Domains.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("P1API.Models.Domains.Product", b =>
                {
                    b.HasOne("P1API.Models.Domains.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("P1API.Models.Domains.ProductImage", b =>
                {
                    b.HasOne("P1API.Models.Domains.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("P1API.Models.Domains.Review", b =>
                {
                    b.HasOne("P1API.Models.Domains.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("P1API.Models.Domains.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
